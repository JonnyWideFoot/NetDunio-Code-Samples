using System;
using System.Threading;
using Microsoft.SPOT;
using Microsoft.SPOT.Hardware;
using SecretLabs.NETMF.Hardware;
using SecretLabs.NETMF.Hardware.Netduino;

namespace TronDisc
{
    public class Program
    {
        public static byte new_animation_num = 0;
        public static byte animation_num = 0;
        public static byte animation_total = 10;

        public static max7219 driver;

        public static void Main()
        {
            // Define spi pins
            OutputPort loadPin = new OutputPort(Pins.GPIO_PIN_D10, false);
            OutputPort dataPin = new OutputPort(Pins.GPIO_PIN_D11, false);
            OutputPort clkPin = new OutputPort(Pins.GPIO_PIN_D13, false);

            // Tron Button to Change Annimations, pulls high
            InterruptPort changeBtn = new InterruptPort(Pins.GPIO_PIN_D0, false, Port.ResistorMode.Disabled, Port.InterruptMode.InterruptEdgeHigh);
            changeBtn.OnInterrupt += new NativeEventHandler(changeBtn_OnInterrupt);

            // Voltage detect on base, pulls high
            InterruptPort dockBtn = new InterruptPort(Pins.GPIO_PIN_D1, false, Port.ResistorMode.Disabled, Port.InterruptMode.InterruptEdgeBoth);
            dockBtn.OnInterrupt += new NativeEventHandler(dockBtn_OnInterrupt);

            // Instance of driver, passing pin assignments
            driver = new max7219(dataPin, clkPin, loadPin);

            byte cnt = 0;

            int r;
            Random rand = new Random();
            r = rand.Next(25);
            int i;
            byte j;
            byte k;
            byte l;
            byte[] bitwise = { 1, 2, 4, 8, 16, 32 };
            int dir = 0;

            // Turn on all LED's
            for (j = 1; j < 9; j++)
                driver.maxSingle(j, 0xFF);

            // Wait 3 seconds to test all LED's
            Thread.Sleep(3000);

            // frame based animation uses 6 bits per char
            // 5 chars per animation frame


            // Animation array of animations
            // built with http://www.harfordhackerspace.org/ledwiz/tron/
            byte[][] animations = new byte[][]
            {

                new byte[]
                {
                  0x0,0x1,0x0,0x8,0x0,
                  0x20,0x3,0x0,0x8,0x0,
                  0x20,0x3,0x0,0x1c,0x0,
                  0x30,0x7,0x0,0x1c,0x0,
                  0x30,0x7,0x0,0x3e,0x0,
                  0x38,0xf,0x0,0x3e,0x0,
                  0x38,0xf,0x0,0x3f,0x1,
                  0x3c,0x1f,0x0,0x3f,0x1,
                  0x3c,0x1f,0x20,0x3f,0x3,
                  0x3e,0x3f,0x20,0x3f,0x3,
                  0x3e,0x3f,0x30,0x3f,0x7,
                  0x3f,0x3f,0x31,0x3f,0x7,
                  0x3f,0x3f,0x39,0x3f,0xf,
                  0x3f,0x3f,0x3b,0x3f,0x2f,
                  0x3f,0x3f,0x3f,0x3f,0x3f,
                  0x3f,0x3e,0x3f,0x37,0x3f,
                  0x1f,0x3c,0x3f,0x37,0x3f,
                  0x1f,0x3c,0x3f,0x23,0x3f,
                  0xf,0x38,0x3f,0x23,0x3f,
                  0xf,0x38,0x3f,0x1,0x3f,
                  0x7,0x30,0x3f,0x1,0x3f,
                  0x7,0x30,0x3f,0x0,0x3e,
                  0x3,0x20,0x3f,0x0,0x3e,
                  0x3,0x20,0x1f,0x0,0x3c,
                  0x1,0x0,0x1f,0x0,0x3c,
                  0x1,0x0,0xf,0x0,0x38,
                  0x0,0x0,0xe,0x0,0x38,
                  0x0,0x0,0x6,0x0,0x30,
                  0x0,0x0,0x4,0x0,0x10,
                  0x0,0x0,0x0,0x0,0x0
                },


                new byte[]
                {
                  0x2,0x20,0x0,0x8,0x0,
                  0x6,0x20,0x1,0x18,0x0,
                  0xe,0x20,0x3,0x38,0x0,
                  0x1c,0x0,0x7,0x30,0x1,
                  0x38,0x0,0xe,0x20,0x3,
                  0x30,0x1,0x1c,0x0,0x7,
                  0x20,0x3,0x38,0x0,0xe,
                  0x0,0x7,0x30,0x1,0x1c,
                  0x0,0xe,0x20,0x3,0x38,
                  0x1,0x1c,0x0,0x7,0x30,
                  0x1,0x18,0x0,0x6,0x20,
                  0x1,0x10,0x0,0x4,0x0,
                  0x0,0x0,0x0,0x0,0x0
                },


                new byte[]
                {
                  0x2a,0x2a,0x2a,0x2a,0x2a,
                  0x15,0x15,0x15,0x15,0x15
                },


                new byte[]
                {
                  0x0,0x0,0x0,0x8,0x0,
                  0x0,0x0,0x0,0x14,0x0,
                  0x0,0x0,0x0,0x22,0x0,
                  0x0,0x0,0x0,0x1,0x1,
                  0x0,0x0,0x20,0x0,0x2,
                  0x0,0x0,0x10,0x0,0x4,
                  0x0,0x0,0x8,0x0,0x8,
                  0x0,0x0,0x4,0x0,0x10,
                  0x0,0x0,0x2,0x0,0x20,
                  0x1,0x0,0x1,0x0,0x0,
                  0x2,0x20,0x0,0x0,0x0,
                  0x4,0x10,0x0,0x0,0x0,
                  0x8,0x8,0x0,0x0,0x0,
                  0x10,0x4,0x0,0x0,0x0,
                  0x20,0x2,0x0,0x0,0x0,
                  0x0,0x1,0x0,0x0,0x0
                },


                new byte[]
                {
                  0x0,0x0,0x2,0x0,0x20,
                  0x1,0x0,0x3,0x0,0x20,
                  0x3,0x20,0x3,0x0,0x20,
                  0x7,0x30,0x3,0x0,0x20,
                  0xf,0x38,0x3,0x0,0x20,
                  0x1f,0x3c,0x3,0x0,0x20,
                  0x3f,0x3e,0x3,0x0,0x20,
                  0x3f,0x3f,0x3,0x0,0x20,
                  0x3f,0x3e,0x3,0x0,0x20,
                  0x1f,0x3c,0x3,0x0,0x20,
                  0xf,0x38,0x3,0x0,0x20,
                  0x7,0x30,0x3,0x0,0x20,
                  0x3,0x20,0x3,0x0,0x20,
                  0x1,0x0,0x3,0x0,0x20,
                  0x0,0x0,0x2,0x0,0x20,
                  0x0,0x0,0x6,0x0,0x30,
                  0x0,0x0,0xe,0x0,0x38,
                  0x0,0x0,0x1e,0x0,0x3c,
                  0x0,0x0,0x3e,0x0,0x3e,
                  0x0,0x0,0x3e,0x1,0x3f,
                  0x0,0x0,0x3e,0x23,0x3f,
                  0x0,0x0,0x3e,0x37,0x3f,
                  0x0,0x0,0x3e,0x3f,0x3f,
                  0x0,0x0,0x3e,0x37,0x3f,
                  0x0,0x0,0x3e,0x23,0x3f,
                  0x0,0x0,0x3e,0x1,0x3f,
                  0x0,0x0,0x3e,0x0,0x3e,
                  0x0,0x0,0x1e,0x0,0x3c,
                  0x0,0x0,0xe,0x0,0x38,
                  0x0,0x0,0x6,0x0,0x30,
                  0x0,0x0,0x2,0x0,0x20
                },


                new byte[]
                {
                  0x0,0x0,0x0,0x38,0x0,
                  0x0,0x0,0x0,0x38,0x1,
                  0x0,0x0,0x0,0x30,0x1,
                  0x0,0x0,0x0,0x30,0x3,
                  0x0,0x0,0x0,0x20,0x3,
                  0x0,0x0,0x0,0x20,0x7,
                  0x0,0x0,0x0,0x0,0x7,
                  0x0,0x0,0x0,0x0,0xf,
                  0x0,0x0,0x0,0x0,0xe,
                  0x0,0x0,0x0,0x0,0x1e,
                  0x0,0x0,0x0,0x0,0x1c,
                  0x0,0x0,0x0,0x0,0x3c,
                  0x0,0x0,0x0,0x0,0x38,
                  0x1,0x0,0x0,0x0,0x38,
                  0x1,0x0,0x0,0x0,0x30,
                  0x3,0x0,0x0,0x0,0x30,
                  0x3,0x0,0x0,0x0,0x20,
                  0x7,0x0,0x0,0x0,0x20,
                  0x7,0x0,0x0,0x0,0x0,
                  0xf,0x0,0x0,0x0,0x0,
                  0xe,0x0,0x0,0x0,0x0,
                  0x1e,0x0,0x0,0x0,0x0,
                  0x1c,0x0,0x0,0x0,0x0,
                  0x3c,0x0,0x0,0x0,0x0,
                  0x38,0x0,0x0,0x0,0x0,
                  0x38,0x1,0x0,0x0,0x0,
                  0x30,0x1,0x0,0x0,0x0,
                  0x30,0x3,0x0,0x0,0x0,
                  0x20,0x3,0x0,0x0,0x0,
                  0x20,0x7,0x0,0x0,0x0,
                  0x0,0x7,0x0,0x0,0x0,
                  0x0,0xf,0x0,0x0,0x0,
                  0x0,0xe,0x0,0x0,0x0,
                  0x0,0x1e,0x0,0x0,0x0,
                  0x0,0x1c,0x0,0x0,0x0,
                  0x0,0x3c,0x0,0x0,0x0,
                  0x0,0x38,0x0,0x0,0x0,
                  0x0,0x38,0x1,0x0,0x0,
                  0x0,0x30,0x1,0x0,0x0,
                  0x0,0x30,0x3,0x0,0x0,
                  0x0,0x20,0x3,0x0,0x0,
                  0x0,0x20,0x7,0x0,0x0,
                  0x0,0x0,0x7,0x0,0x0,
                  0x0,0x0,0xf,0x0,0x0,
                  0x0,0x0,0xe,0x0,0x0,
                  0x0,0x0,0x1e,0x0,0x0,
                  0x0,0x0,0x1c,0x0,0x0,
                  0x0,0x0,0x3c,0x0,0x0,
                  0x0,0x0,0x38,0x0,0x0,
                  0x0,0x0,0x38,0x1,0x0,
                  0x0,0x0,0x30,0x1,0x0,
                  0x0,0x0,0x30,0x3,0x0,
                  0x0,0x0,0x20,0x3,0x0,
                  0x0,0x0,0x20,0x7,0x0,
                  0x0,0x0,0x0,0x7,0x0,
                  0x0,0x0,0x0,0xf,0x0,
                  0x0,0x0,0x0,0xe,0x0
                },


                new byte[]
                {
                  0x0,0x0,0x0,0x8,0x0,
                  0x0,0x0,0x0,0x14,0x0,
                  0x0,0x0,0x0,0x22,0x0,
                  0x0,0x0,0x0,0x1,0x1,
                  0x0,0x0,0x20,0x0,0x2,
                  0x0,0x0,0x10,0x0,0x4,
                  0x0,0x0,0x8,0x0,0x8,
                  0x0,0x0,0x4,0x0,0x10,
                  0x0,0x0,0x2,0x0,0x20,
                  0x1,0x0,0x1,0x0,0x0,
                  0x2,0x20,0x0,0x0,0x0,
                  0x4,0x10,0x0,0x0,0x0,
                  0x8,0x8,0x0,0x0,0x0,
                  0x10,0x4,0x0,0x0,0x0,
                  0x20,0x2,0x0,0x0,0x0,
                  0x20,0x3,0x0,0x0,0x0,
                  0x20,0x2,0x0,0x0,0x0,
                  0x20,0x3,0x0,0x0,0x0,
                  0x8,0x9,0x0,0x0,0x0,
                  0x10,0x5,0x0,0x0,0x0,
                  0x20,0x3,0x0,0x0,0x0,
                  0x20,0x2,0x0,0x0,0x0
                },

                new byte[]
                {
                  0x30,0x7,0x0,0x0,0x0,
                  0x38,0xe,0x0,0x0,0x0,
                  0x1c,0x1c,0x0,0x0,0x0,
                  0x38,0xe,0x0,0x0,0x0,
                  0x30,0x7,0x0,0x0,0x0,
                  0x30,0x6,0x0,0x0,0x0,
                  0x10,0x4,0x0,0x0,0x0,
                  0x14,0x14,0x0,0x0,0x0,
                  0x15,0x14,0x1,0x0,0x0,
                  0x15,0x14,0x5,0x0,0x10,
                  0x15,0x14,0x15,0x0,0x14,
                  0x15,0x14,0x15,0x1,0x15,
                  0x15,0x14,0x15,0x15,0x15,
                  0x15,0x14,0x15,0x9,0x15,
                  0x15,0x14,0x15,0x2a,0x14,
                  0x15,0x14,0x25,0x2a,0x12,
                  0x15,0x14,0x29,0x2a,0xa,
                  0x14,0x14,0x2a,0x2a,0x2a,
                  0x12,0x24,0x2a,0x2a,0x2a,
                  0xa,0x28,0x2a,0x2a,0x2a,
                  0x2a,0x2a,0x2a,0x2a,0x2a
                },


                new byte[]
                {
                  0x30,0x7,0x0,0x0,0x20,
                  0x31,0x7,0x0,0x0,0x0,
                  0x32,0x7,0x0,0x0,0x0,
                  0x34,0x7,0x0,0x0,0x0,
                  0x38,0x7,0x0,0x0,0x0,
                  0x38,0xb,0x0,0x0,0x0,
                  0x38,0x13,0x0,0x0,0x0,
                  0x38,0x23,0x0,0x0,0x0,
                  0x38,0x3,0x1,0x0,0x0,
                  0x38,0x23,0x0,0x0,0x0,
                  0x38,0x13,0x0,0x0,0x0,
                  0x38,0xb,0x0,0x0,0x0,
                  0x38,0x7,0x0,0x0,0x0,
                  0x34,0x7,0x0,0x0,0x0,
                  0x32,0x7,0x0,0x0,0x0,
                  0x31,0x7,0x0,0x0,0x0
                }
            };


            // Main loop
            while (true)
            {
                animation_num = new_animation_num;

                // Algorithmic animation
                if (animation_num == 10)
                {
                    // fade
                    if (dir == 1)
                        cnt--;
                    else
                        cnt++;

                    if (dir == 1 && cnt == 0)
                        dir = 0;

                    else if (dir == 0 && cnt == 15)
                        dir = 1;

                    for (j = 1; j < 8; j++)
                        driver.maxSingle(j, 0xFF);

                    driver.maxSingle(0x0a, (byte)(cnt & 0x0f));

                    Thread.Sleep(15);
                } // Algorithmic animation
                else if (animation_num == 9)
                {
                    for (j = 1; j < 6; j++)
                    {
                        l = 1;
                        for (k = 1; k < 6; k++)
                            if (k != j)
                                driver.maxSingle(k, 0);
                        for (i = 0; i < 6; i++)
                        {
                            driver.maxSingle(j, bitwise[i]);
                        }
                    }
                }
                else // non algorithmic animation, uses bit data from animation arrays
                {
                    for (i = 0; i < animations[animation_num].Length; i++)
                    {
                        driver.maxSingle((byte)((i % 5) + 1), animations[animation_num][i]);
                    }
                }
            }
        }



        //Interrupt Handler for changeBtn to change annimations
        static void changeBtn_OnInterrupt(uint data1, uint data2, DateTime time)
        {
            if (++new_animation_num > animation_total)
            {
                new_animation_num = 0;
            }
            driver.maxSingle(0x0a, 0x0f & 0x0f); // reset intensity to max

            Debug.Print("Animation Num: ");
            Debug.Print(new_animation_num.ToString());

        }

        static void dockBtn_OnInterrupt(uint data1, uint data2, DateTime time)
        {
            if (data2 == 1)
                new_animation_num = 10;
            else
                new_animation_num = 0;

            driver.maxSingle(0x0a, 0x0f & 0x0f); // reset intensity to max

            Debug.Print(data2.ToString());

            Debug.Print("Animation Num: ");
            Debug.Print(new_animation_num.ToString());
        }
    }
}
